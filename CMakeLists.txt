cmake_minimum_required(VERSION 3.10)
project(bee8080)

# Require C++11 (and position independent code)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(BUILD_8080_TESTS "Enables the Bee8080 test suite." OFF)

set(BEE8080_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif()

set(BEE8080_TEST_SOURCES
	bee8080-tests.cpp)

set(BEE8080_HEADER
	bee8080.h)

set(BEE8080_SOURCE
	bee8080.cpp)

add_library(bee8080 ${BEE8080_SOURCE} ${BEE8080_HEADER})
target_include_directories(bee8080 PUBLIC ${BEE8080_INCLUDE_DIR})
target_compile_definitions(bee8080 PRIVATE BEE8080_STATIC=1 _CRT_SECURE_NO_WARNINGS=1)
add_library(libbee8080 ALIAS bee8080)

if (BUILD_8080_TESTS STREQUAL "ON")
    project(bee8080-tests)
    add_executable(bee8080-tests ${BEE8080_TEST_SOURCES})
    include_directories(bee8080-tests ${BEE8080_INCLUDE_DIR})
    target_link_libraries(bee8080-tests libbee8080)
endif()

if (WIN32)
    message(STATUS "Operating system is Windows.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	target_compile_options(bee8080 PRIVATE -Wall)
	message(STATUS "Compiler is MinGW.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL MSVC)
	message(WARNING "MSVC support is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
	target_compile_options(bee8080 PRIVATE /W4)
	message(STATUS "Compiler is MSVC.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
	message(WARNING "Clang support on Windows is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
	target_compile_options(bee8080 PRIVATE -Wall)
	message(STATUS "Compiler is Clang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
elseif (UNIX AND NOT APPLE)
    message(STATUS "Operating system is Linux.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	target_compile_options(bee8080 PRIVATE -Wall)
	message(STATUS "Compiler is MinGW.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
	target_compile_options(bee8080 PRIVATE -Wall)
	message(STATUS "Compiler is Clang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
elseif (APPLE)
    message(STATUS "Operating system is Mac.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL AppleClang)
	target_compile_options(bee8080 PRIVATE -Wall)
	message(STATUS "Compiler is AppleClang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
else()
    message(SEND_ERROR "Operating system not supported.")
    return()
endif()